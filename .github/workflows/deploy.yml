name: Deploy AWS

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      ref:
        required: true
        type: string
      repo:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

jobs:
  # 1. Criar Infra
  infra:
    runs-on: ubuntu-latest
    outputs:
      project_name_clean: ${{ steps.extract_name.outputs.project_name_clean }}
    steps:
      - name: Checkout código Terraform
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extrair só o nome do repo (parte após /)
        id: extract_name
        run: |
          echo "project_name_clean=$(echo '${{ inputs.project_name }}' | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init e Apply - ecs_infra
        working-directory: infra/ecs_infra
        run: |
          terraform init
          terraform apply -auto-approve -var="project_name=${{ steps.extract_name.outputs.project_name_clean }}"

  # 2. Build e Push da imagem para ECR (depende do infra)
  package:
    runs-on: ubuntu-latest
    needs: infra
    outputs:
      image_uri: ${{ steps.set-image.outputs.image_uri }}
      ecr_uri: ${{ steps.set-image.outputs.ecr_uri }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - id: set-image
        name: Definir URIs da imagem
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          REPO_NAME="${{ needs.infra.outputs.project_name_clean }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region ${{ secrets.AWS_REGION }})
          ECR_URI="$ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$REPO_NAME"
          IMAGE_URI="$ECR_URI:$IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Login no ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.set-image.outputs.ecr_uri }}

      - name: Build Docker
        run: docker build -t "${{ needs.infra.outputs.project_name_clean }}:$IMAGE_TAG" .

      - name: Tag e Push da Imagem
        run: |
          docker tag "${{ needs.infra.outputs.project_name_clean }}:$IMAGE_TAG" "${{ steps.set-image.outputs.ecr_uri }}:$IMAGE_TAG"
          docker push "${{ steps.set-image.outputs.ecr_uri }}:$IMAGE_TAG"
          docker tag "${{ steps.set-image.outputs.ecr_uri }}:$IMAGE_TAG" "${{ steps.set-image.outputs.ecr_uri }}:latest"
          docker push "${{ steps.set-image.outputs.ecr_uri }}:latest"

  # 3. Atualizar ECS com nova imagem, executando módulo ecs_task (depende do package)
  deploy:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout código Terraform
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init e Apply - ecs_app com nova imagem
        working-directory: infra/ecs_app
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="project_name=${{ needs.infra.outputs.project_name_clean }}" \
            -var="image=${{ needs.package.outputs.image_uri }}" \
            -var="cpu=${{ vars.cpu }}" \
            -var="memory=${{ vars.memory }}" \
            -var="desired_count=${{ vars.desired_count }}" \
            -var="capacity_provider=${{ vars.capacity_provider }}" \
            -var="subnet_ids=${{ tojson(vars.subnet_ids) }}" \
            -var="security_group_id=${{ vars.security_group_id }}" \
            -var="cluster_id=${{ vars.cluster_id }}" \
            -var="target_group_arn=${{ vars.target_group_arn }}" \
            -var="lb_listener_depends_on=${{ vars.lb_listener_depends_on }}"
