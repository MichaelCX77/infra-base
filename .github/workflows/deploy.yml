name: Deploy AWS

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

env:
  AWS_REGION: ${{ inputs.aws_region }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.set-image.outputs.image_uri }}
      ecr_uri: ${{ steps.set-image.outputs.ecr_uri }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - id: set-image
        name: Gerar tag da imagem
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          REPO_NAME="${{ inputs.project_name }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region $AWS_REGION)
          ECR_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME"
          IMAGE_URI="$ECR_URI:$IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ECR_URI=$ECR_URI" >> $GITHUB_OUTPUT
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Criar repositório ECR (se não existir)
        run: |
          aws ecr describe-repositories --repository-names "${{ inputs.project_name }}" || aws ecr create-repository --repository-name "${{ inputs.project_name }}"

      - name: Login no ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ steps.set-image.outputs.ecr_uri }}

      - name: Build da imagem Docker
        run: docker build -t "${{ inputs.project_name }}:${{ steps.set-image.outputs.IMAGE_TAG }}" .

      - name: Tag da imagem para o ECR (tag randômica)
        run: docker tag "${{ inputs.project_name }}:${{ steps.set-image.outputs.IMAGE_TAG }}" "${{ steps.set-image.outputs.ecr_uri }}:${{ steps.set-image.outputs.IMAGE_TAG }}"

      - name: Push para o ECR (tag randômica)
        run: docker push "${{ steps.set-image.outputs.ecr_uri }}:${{ steps.set-image.outputs.IMAGE_TAG }}"

      - name: Tag e push latest
        run: |
          docker tag "${{ steps.set-image.outputs.ecr_uri }}:${{ steps.set-image.outputs.IMAGE_TAG }}" "${{ steps.set-image.outputs.ecr_uri }}:latest"
          docker push "${{ steps.set-image.outputs.ecr_uri }}:latest"

      - name: Checkout código Terraform
        uses: actions/checkout@v3
        with:
          path: infra-base

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: infra-base
        run: terraform init

      - name: Terraform Validate
        working-directory: infra-base
        run: terraform validate

      - name: Terraform Plan
        working-directory: infra-base
        run: terraform plan -var="project_name=${{ inputs.project_name }}" -var="image=${{ steps.set-image.outputs.ecr_uri }}:latest"

      - name: Terraform Apply
        working-directory: infra-base
        run: terraform apply -auto-approve -var="project_name=${{ inputs.project_name }}" -var="image=${{ steps.set-image.outputs.ecr_uri }}:latest"
