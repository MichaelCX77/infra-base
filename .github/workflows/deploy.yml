name: Deploy AWS

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

jobs:
  # ðŸš€ 1. Criar Infra
  infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cÃ³digo Terraform
        uses: actions/checkout@v3
        with:
          path: infra

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Apply Infra
        working-directory: infra
        run: terraform apply -auto-approve -var="project_name=${{ inputs.project_name }}"

  # ðŸš€ 2. Build e Push da imagem
  package:
    runs-on: ubuntu-latest
    needs: infra
    outputs:
      image_uri: ${{ steps.set-image.outputs.image_uri }}
      ecr_uri: ${{ steps.set-image.outputs.ecr_uri }}

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v3

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - id: set-image
        name: Definir URIs da imagem
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          REPO_NAME="${{ inputs.project_name }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region ${{ secrets.AWS_REGION }})
          ECR_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME"
          IMAGE_URI="$ECR_URI:$IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Login no ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ steps.set-image.outputs.ecr_uri }}

      - name: Build Docker
        run: docker build -t "${{ inputs.project_name }}:$IMAGE_TAG" .

      - name: Tag e Push da Imagem
        run: |
          docker tag "${{ inputs.project_name }}:$IMAGE_TAG" "${{ steps.set-image.outputs.ecr_uri }}:$IMAGE_TAG"
          docker push "${{ steps.set-image.outputs.ecr_uri }}:$IMAGE_TAG"
          docker tag "${{ steps.set-image.outputs.ecr_uri }}:$IMAGE_TAG" "${{ steps.set-image.outputs.ecr_uri }}:latest"
          docker push "${{ steps.set-image.outputs.ecr_uri }}:latest"

  # ðŸš€ 3. Atualizar ECS com nova imagem
  deploy:
    runs-on: ubuntu-latest
    needs: package

    steps:
      - name: Checkout cÃ³digo Terraform
        uses: actions/checkout@v3
        with:
          path: infra

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Atualizar ECS com nova imagem
        working-directory: infra
        run: terraform apply -auto-approve -var="project_name=${{ inputs.project_name }}" -var="image=${{ needs.package.outputs.image_uri }}"
