name: Deploy AWS

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      ref:
        required: true
        type: string
      repo:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

jobs:
  infra:
    runs-on: ubuntu-latest
    outputs:
      project_name_clean: ${{ steps.extract_name.outputs.project_name_clean }}
      security_group_id_b64: ${{ steps.tf_apply.outputs.security_group_id_b64 }}
      cluster_id_b64: ${{ steps.tf_apply.outputs.cluster_id_b64 }}
      target_group_arn_b64: ${{ steps.tf_apply.outputs.target_group_arn_b64 }}
    steps:
      - name: Checkout código Terraform
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extrair só o nome do repo (parte após /)
        id: extract_name
        run: |
          echo "project_name_clean=$(echo '${{ inputs.project_name }}' | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init e Apply - ecs_infra
        id: tf_apply
        working-directory: infra/ecs_infra
        run: |
          terraform init
          terraform apply -auto-approve -var="project_name=${{ steps.extract_name.outputs.project_name_clean }}"

          SG=$(terraform output -raw security_group_id | tr -d '\r\n')
          CLUSTER=$(terraform output -raw cluster_id | tr -d '\r\n')
          TG=$(terraform output -raw target_group_arn | tr -d '\r\n')

          echo "DEBUG: security_group_id=$SG"
          echo "DEBUG: cluster_id=$CLUSTER"
          echo "DEBUG: target_group_arn=$TG"

          echo "security_group_id_b64=$(echo -n $SG | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "cluster_id_b64=$(echo -n $CLUSTER | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT
          echo "target_group_arn_b64=$(echo -n $TG | base64 -w0 | base64 -w0)" >> $GITHUB_OUTPUT

  package:
    runs-on: ubuntu-latest
    needs: infra
    outputs:
      image_uri_b64: ${{ steps.set-image.outputs.image_uri_b64 }}
      ecr_uri: ${{ steps.set-image.outputs.ecr_uri }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - id: set-image
        name: Definir URIs da imagem
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          REPO_NAME="${{ needs.infra.outputs.project_name_clean }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region ${{ secrets.AWS_REGION }})
          ECR_URI="$ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$REPO_NAME"
          IMAGE_URI="$ECR_URI:$IMAGE_TAG"
          IMG_B64=$(echo -n "$IMAGE_URI" | base64 -w0 | base64 -w0)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "image_uri_b64=$IMG_B64" >> $GITHUB_OUTPUT

      - name: Login no ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.set-image.outputs.ecr_uri }}

      - name: Build Docker
        run: docker build -t "${{ needs.infra.outputs.project_name_clean }}:$IMAGE_TAG" .

      - name: Tag e Push da Imagem
        run: |
          docker tag "${{ needs.infra.outputs.project_name_clean }}:$IMAGE_TAG" "${{ steps.set-image.outputs.ecr_uri }}:$IMAGE_TAG"
          docker push "${{ steps.set-image.outputs.ecr_uri }}:$IMAGE_TAG"
          docker tag "${{ steps.set-image.outputs.ecr_uri }}:$IMAGE_TAG" "${{ steps.set-image.outputs.ecr_uri }}:latest"
          docker push "${{ steps.set-image.outputs.ecr_uri }}:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: [infra, package]
    steps:
      - name: Checkout código Terraform
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Decodificar variáveis
        run: |
          decode() {
            echo "$1" | base64 -d | base64 -d
          }

          SG=$(decode "${{ needs.infra.outputs.security_group_id_b64 }}")
          CLUSTER=$(decode "${{ needs.infra.outputs.cluster_id_b64 }}")
          TG=$(decode "${{ needs.infra.outputs.target_group_arn_b64 }}")
          IMG=$(decode "${{ needs.package.outputs.image_uri_b64 }}")

          echo "::add-mask::$SG"
          echo "::add-mask::$CLUSTER"
          echo "::add-mask::$TG"
          echo "::add-mask::$IMG"

          echo "security_group_id=$SG" >> $GITHUB_ENV
          echo "cluster_id=$CLUSTER" >> $GITHUB_ENV
          echo "target_group_arn=$TG" >> $GITHUB_ENV
          echo "image_uri=$IMG" >> $GITHUB_ENV

      - name: Terraform Plan - ecs_app (debug)
        working-directory: infra/ecs_app
        run: |
          echo "🔍 DEBUG: target_group_arn: ${{ env.target_group_arn }}"
          echo "🔍 DEBUG: security_group_id: ${{ env.security_group_id }}"
          echo "🔍 DEBUG: image URI: ${{ env.image_uri }}"

          terraform init
          terraform plan \
            -var="project_name=${{ needs.infra.outputs.project_name_clean }}" \
            -var="image=${{ env.image_uri }}" \
            -var="security_group_id=${{ env.security_group_id }}" \
            -var="target_group_arn=${{ env.target_group_arn }}"

      - name: Terraform Apply - ecs_app com nova imagem
        working-directory: infra/ecs_app
        run: |
          terraform apply -auto-approve \
            -var="project_name=${{ needs.infra.outputs.project_name_clean }}" \
            -var="image=${{ env.image_uri }}" \
            -var="security_group_id=${{ env.security_group_id }}" \
            -var="target_group_arn=${{ env.target_group_arn }}"
