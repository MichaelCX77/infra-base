name: Deploy AWS

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      ref:
        required: true
        type: string
      repo:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

jobs:
  infra:
    runs-on: ubuntu-latest
    outputs:
      project_name_clean: ${{ steps.extract_name.outputs.project_name_clean }}
      security_group_id_b64: ${{ steps.tf_apply.outputs.security_group_id_b64 }}
      cluster_id_b64: ${{ steps.tf_apply.outputs.cluster_id_b64 }}
      target_group_arn_b64: ${{ steps.tf_apply.outputs.target_group_arn_b64 }}
    steps:
      - name: Checkout cÃ³digo Terraform
        uses: actions/checkout@v3

      - name: Extrair project_name_clean
        id: extract_name
        run: |
          CLEAN=$(echo "${{ inputs.project_name }}" | cut -d'/' -f2)
          echo "project_name_clean=$CLEAN" >> $GITHUB_OUTPUT

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init & Apply
        id: tf_apply
        run: |
          terraform init
          terraform apply -auto-approve -var="project_name=${{ steps.extract_name.outputs.project_name_clean }}"
          # pega os outputs
          SG=$(terraform output -raw security_group_id)
          CLUSTER=$(terraform output -raw cluster_id)
          TG=$(terraform output -raw target_group_arn)
          # codifica base64 duas vezes
          SG_B64=$(echo -n "$SG" | base64 -w0 | base64 -w0)
          CLUSTER_B64=$(echo -n "$CLUSTER" | base64 -w0 | base64 -w0)
          TG_B64=$(echo -n "$TG" | base64 -w0 | base64 -w0)
          echo "security_group_id_b64=$SG_B64" >> $GITHUB_OUTPUT
          echo "cluster_id_b64=$CLUSTER_B64" >> $GITHUB_OUTPUT
          echo "target_group_arn_b64=$TG_B64" >> $GITHUB_OUTPUT

  package:
    needs: infra
    runs-on: ubuntu-latest
    outputs:
      image_uri_b64: ${{ steps.set-image.outputs.image_uri_b64 }}
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - id: set-image
        run: |
          TAG=$(date +%Y%m%d%H%M%S)
          REPO="${{ needs.infra.outputs.project_name_clean }}"
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text --region ${{ secrets.AWS_REGION }})
          URI="$ACCOUNT.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$REPO:$TAG"
          IMG_B64=$(echo -n "$URI" | base64 -w0 | base64 -w0)
          echo "image_uri_b64=$IMG_B64" >> $GITHUB_OUTPUT
      - name: Build & Push
        run: |
          URI=$(echo "${{ steps.set-image.outputs.image_uri_b64 }}" | base64 -d | base64 -d)
          docker build -t "$URI" .
          docker push "$URI"

  deploy:
    needs: [infra, package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Decodificar outputs
        run: |
          SG=$(echo "${{ needs.infra.outputs.security_group_id_b64 }}" | base64 -d | base64 -d)
          CLUSTER=$(echo "${{ needs.infra.outputs.cluster_id_b64 }}" | base64 -d | base64 -d)
          TG=$(echo "${{ needs.infra.outputs.target_group_arn_b64 }}" | base64 -d | base64 -d)
          IMG=$(echo "${{ needs.package.outputs.image_uri_b64 }}" | base64 -d | base64 -d)
          echo "::add-mask::$SG"
          echo "::add-mask::$CLUSTER"
          echo "::add-mask::$TG"
          echo "::add-mask::$IMG"
          echo "security_group_id=$SG" >> $GITHUB_ENV
          echo "cluster_id=$CLUSTER" >> $GITHUB_ENV
          echo "target_group_arn=$TG" >> $GITHUB_ENV
          echo "image_uri=$IMG" >> $GITHUB_ENV

      - name: Terraform Apply ecs_app
        working-directory: infra/ecs_app
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="project_name=${{ needs.infra.outputs.project_name_clean }}" \
            -var="image=${{ env.image_uri }}" \
            -var="security_group_id=${{ env.security_group_id }}" \
            -var="cluster_id=${{ env.cluster_id }}" \
            -var="target_group_arn=${{ env.target_group_arn }}"

